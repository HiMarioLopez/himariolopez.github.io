{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactSwipeable = require('react-swipeable');\n\nvar _reactSwipeable2 = _interopRequireDefault(_reactSwipeable);\n\nvar _lodash = require('lodash.throttle');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = require('lodash.debounce');\n\nvar _lodash4 = _interopRequireDefault(_lodash3);\n\nvar _resizeObserverPolyfill = require('resize-observer-polyfill');\n\nvar _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar screenChangeEvents = ['fullscreenchange', 'MSFullscreenChange', 'mozfullscreenchange', 'webkitfullscreenchange'];\n\nvar ImageGallery = function (_React$Component) {\n  _inherits(ImageGallery, _React$Component);\n\n  function ImageGallery(props) {\n    _classCallCheck(this, ImageGallery);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ImageGallery).call(this, props));\n\n    _this.slideToIndex = function (index, event) {\n      var _this$state = _this.state;\n      var currentIndex = _this$state.currentIndex;\n      var isTransitioning = _this$state.isTransitioning;\n\n      if (!isTransitioning) {\n        if (event) {\n          if (_this._intervalId) {\n            // user triggered event while ImageGallery is playing, reset interval\n            _this.pause(false);\n\n            _this.play(false);\n          }\n        }\n\n        var slideCount = _this.props.items.length - 1;\n        var nextIndex = index;\n\n        if (index < 0) {\n          nextIndex = slideCount;\n        } else if (index > slideCount) {\n          nextIndex = 0;\n        }\n\n        _this.setState({\n          previousIndex: currentIndex,\n          currentIndex: nextIndex,\n          isTransitioning: nextIndex !== currentIndex,\n          offsetPercentage: 0,\n          style: {\n            transition: 'all ' + _this.props.slideDuration + 'ms ease-out'\n          }\n        }, _this._onSliding);\n      }\n    };\n\n    _this._onSliding = function () {\n      var isTransitioning = _this.state.isTransitioning;\n      _this._transitionTimer = window.setTimeout(function () {\n        if (isTransitioning) {\n          _this.setState({\n            isTransitioning: !isTransitioning\n          });\n        }\n      }, _this.props.slideDuration + 50);\n    };\n\n    _this._handleScreenChange = function () {\n      /*\n        handles screen change events that the browser triggers e.g. esc key\n      */\n      var fullScreenElement = document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;\n\n      if (_this.props.onScreenChange) {\n        _this.props.onScreenChange(fullScreenElement);\n      }\n\n      _this.setState({\n        isFullscreen: !!fullScreenElement\n      });\n    };\n\n    _this._toggleFullScreen = function () {\n      if (_this.state.isFullscreen) {\n        _this.exitFullScreen();\n      } else {\n        _this.fullScreen();\n      }\n    };\n\n    _this._togglePlay = function () {\n      if (_this._intervalId) {\n        _this.pause();\n      } else {\n        _this.play();\n      }\n    };\n\n    _this._initGalleryResizing = function (element) {\n      /*\n        When image-gallery-slide-wrapper unmounts and mounts when thumbnail bar position is changed\n        ref is called twice, once with null and another with the element.\n        Make sure element is available before calling observe.\n      */\n      if (element) {\n        _this._imageGallerySlideWrapper = element;\n        _this.resizeObserver = new _resizeObserverPolyfill2.default(_this._createResizeObserver);\n\n        _this.resizeObserver.observe(element);\n      }\n    };\n\n    _this._createResizeObserver = (0, _lodash4.default)(function (entries) {\n      if (!entries) return;\n      entries.forEach(function () {\n        _this._handleResize();\n      });\n    }, 300);\n\n    _this._handleResize = function () {\n      var currentIndex = _this.state.currentIndex;\n\n      if (_this._imageGallery) {\n        _this.setState({\n          galleryWidth: _this._imageGallery.offsetWidth\n        });\n      }\n\n      if (_this._imageGallerySlideWrapper) {\n        _this.setState({\n          gallerySlideWrapperHeight: _this._imageGallerySlideWrapper.offsetHeight\n        });\n      }\n\n      if (_this._thumbnailsWrapper) {\n        if (_this._isThumbnailHorizontal()) {\n          _this.setState({\n            thumbnailsWrapperHeight: _this._thumbnailsWrapper.offsetHeight\n          });\n        } else {\n          _this.setState({\n            thumbnailsWrapperWidth: _this._thumbnailsWrapper.offsetWidth\n          });\n        }\n      } // Adjust thumbnail container when thumbnail width or height is adjusted\n\n\n      _this._setThumbsTranslate(-_this._getThumbsTranslate(currentIndex));\n    };\n\n    _this._handleKeyDown = function (event) {\n      var LEFT_ARROW = 37;\n      var RIGHT_ARROW = 39;\n      var ESC_KEY = 27;\n      var key = parseInt(event.keyCode || event.which || 0);\n\n      switch (key) {\n        case LEFT_ARROW:\n          if (_this._canSlideLeft() && !_this._intervalId) {\n            _this._slideLeft();\n          }\n\n          break;\n\n        case RIGHT_ARROW:\n          if (_this._canSlideRight() && !_this._intervalId) {\n            _this._slideRight();\n          }\n\n          break;\n\n        case ESC_KEY:\n          if (_this.state.isFullscreen && !_this.props.useBrowserFullscreen) {\n            _this.exitFullScreen();\n          }\n\n      }\n    };\n\n    _this._handleImageError = function (event) {\n      if (_this.props.defaultImage && event.target.src.indexOf(_this.props.defaultImage) === -1) {\n        event.target.src = _this.props.defaultImage;\n      }\n    };\n\n    _this._handleOnSwiped = function (e, deltaX, deltaY, isFlick) {\n      var _this$state2 = _this.state;\n      var scrollingUpDown = _this$state2.scrollingUpDown;\n      var scrollingLeftRight = _this$state2.scrollingLeftRight;\n      var isRTL = _this.props.isRTL;\n\n      if (scrollingUpDown) {\n        // user stopped scrollingUpDown\n        _this.setState({\n          scrollingUpDown: false\n        });\n      }\n\n      if (scrollingLeftRight) {\n        // user stopped scrollingLeftRight\n        _this.setState({\n          scrollingLeftRight: false\n        });\n      }\n\n      if (!scrollingUpDown) {\n        // don't swipe if user is scrolling\n        var side = (deltaX > 0 ? 1 : -1) * (isRTL ? -1 : 1); //if it is RTL the direction is reversed\n\n        _this._handleOnSwipedTo(side, isFlick);\n      }\n    };\n\n    _this._handleSwiping = function (e, deltaX, deltaY, delta) {\n      var _this$state3 = _this.state;\n      var galleryWidth = _this$state3.galleryWidth;\n      var isTransitioning = _this$state3.isTransitioning;\n      var scrollingUpDown = _this$state3.scrollingUpDown;\n      var swipingTransitionDuration = _this.props.swipingTransitionDuration;\n\n      _this._setScrollDirection(deltaX, deltaY);\n\n      if (!isTransitioning && !scrollingUpDown) {\n        var side = deltaX < 0 ? 1 : -1;\n        var offsetPercentage = delta / galleryWidth * 100;\n\n        if (Math.abs(offsetPercentage) >= 100) {\n          offsetPercentage = 100;\n        }\n\n        var swipingTransition = {\n          transition: 'transform ' + swipingTransitionDuration + 'ms ease-out'\n        };\n\n        _this.setState({\n          offsetPercentage: side * offsetPercentage,\n          style: swipingTransition\n        });\n      } else {\n        // don't move the slide\n        _this.setState({\n          offsetPercentage: 0\n        });\n      }\n    };\n\n    _this._slideLeft = function () {\n      _this.props.isRTL ? _this._slideNext() : _this._slidePrevious();\n    };\n\n    _this._slideRight = function () {\n      _this.props.isRTL ? _this._slidePrevious() : _this._slideNext();\n    };\n\n    _this._slidePrevious = function (event) {\n      _this.slideToIndex(_this.state.currentIndex - 1, event);\n    };\n\n    _this._slideNext = function (event) {\n      _this.slideToIndex(_this.state.currentIndex + 1, event);\n    };\n\n    _this._renderItem = function (item) {\n      var onImageError = _this.props.onImageError || _this._handleImageError;\n      return _react2.default.createElement('div', {\n        className: 'image-gallery-image'\n      }, item.imageSet ? _react2.default.createElement('picture', {\n        onLoad: _this.props.onImageLoad,\n        onError: onImageError\n      }, item.imageSet.map(function (source, index) {\n        return _react2.default.createElement('source', {\n          key: index,\n          media: source.media,\n          srcSet: source.srcSet,\n          type: source.type\n        });\n      }), _react2.default.createElement('img', {\n        alt: item.originalAlt,\n        src: item.original\n      })) : _react2.default.createElement('img', {\n        src: item.original,\n        alt: item.originalAlt,\n        srcSet: item.srcSet,\n        sizes: item.sizes,\n        title: item.originalTitle,\n        onLoad: _this.props.onImageLoad,\n        onError: onImageError\n      }), item.description && _react2.default.createElement('span', {\n        className: 'image-gallery-description'\n      }, item.description));\n    };\n\n    _this._renderThumbInner = function (item) {\n      var onThumbnailError = _this.props.onThumbnailError || _this._handleImageError;\n      return _react2.default.createElement('div', {\n        className: 'image-gallery-thumbnail-inner'\n      }, _react2.default.createElement('img', {\n        src: item.thumbnail,\n        alt: item.thumbnailAlt,\n        title: item.thumbnailTitle,\n        onError: onThumbnailError\n      }), item.thumbnailLabel && _react2.default.createElement('div', {\n        className: 'image-gallery-thumbnail-label'\n      }, item.thumbnailLabel));\n    };\n\n    _this._onThumbnailClick = function (event, index) {\n      _this.slideToIndex(index, event);\n\n      if (_this.props.onThumbnailClick) {\n        _this.props.onThumbnailClick(event, index);\n      }\n    };\n\n    _this.state = {\n      currentIndex: props.startIndex,\n      thumbsTranslate: 0,\n      offsetPercentage: 0,\n      galleryWidth: 0,\n      thumbnailsWrapperWidth: 0,\n      thumbnailsWrapperHeight: 0,\n      isFullscreen: false,\n      isPlaying: false\n    }; // Used to update the throttle if slideDuration changes\n\n    _this._unthrottledSlideToIndex = _this.slideToIndex;\n    _this.slideToIndex = (0, _lodash2.default)(_this._unthrottledSlideToIndex, props.slideDuration, {\n      trailing: false\n    });\n\n    if (props.lazyLoad) {\n      _this._lazyLoaded = [];\n    }\n\n    return _this;\n  }\n\n  _createClass(ImageGallery, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.disableArrowKeys !== nextProps.disableArrowKeys) {\n        if (nextProps.disableArrowKeys) {\n          window.removeEventListener('keydown', this._handleKeyDown);\n        } else {\n          window.addEventListener('keydown', this._handleKeyDown);\n        }\n      }\n\n      if (nextProps.lazyLoad && (!this.props.lazyLoad || this.props.items !== nextProps.items)) {\n        this._lazyLoaded = [];\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var itemsChanged = prevProps.items.length !== this.props.items.length;\n\n      if (itemsChanged) {\n        this._handleResize();\n      }\n\n      if (prevState.currentIndex !== this.state.currentIndex) {\n        if (this.props.onSlide) {\n          this.props.onSlide(this.state.currentIndex);\n        }\n\n        this._updateThumbnailTranslate(prevState.currentIndex);\n      }\n\n      if (prevProps.slideDuration !== this.props.slideDuration) {\n        this.slideToIndex = (0, _lodash2.default)(this._unthrottledSlideToIndex, this.props.slideDuration, {\n          trailing: false\n        });\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.autoPlay) {\n        this.play();\n      }\n\n      if (!this.props.disableArrowKeys) {\n        window.addEventListener('keydown', this._handleKeyDown);\n      }\n\n      this._onScreenChangeEvent();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (!this.props.disableArrowKeys) {\n        window.removeEventListener('keydown', this._handleKeyDown);\n      }\n\n      this._offScreenChangeEvent();\n\n      if (this._intervalId) {\n        window.clearInterval(this._intervalId);\n        this._intervalId = null;\n      }\n\n      if (this.resizeObserver && this._imageGallerySlideWrapper) {\n        this.resizeObserver.unobserve(this._imageGallerySlideWrapper);\n      }\n\n      if (this._transitionTimer) {\n        window.clearTimeout(this._transitionTimer);\n      }\n\n      if (this._createResizeObserver) {\n        this._createResizeObserver();\n      }\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      var _this2 = this;\n\n      var callback = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n      if (!this._intervalId) {\n        var _props = this.props;\n        var slideInterval = _props.slideInterval;\n        var slideDuration = _props.slideDuration;\n        this.setState({\n          isPlaying: true\n        });\n        this._intervalId = window.setInterval(function () {\n          if (!_this2.state.hovering) {\n            if (!_this2.props.infinite && !_this2._canSlideRight()) {\n              _this2.pause();\n            } else {\n              _this2.slideToIndex(_this2.state.currentIndex + 1);\n            }\n          }\n        }, Math.max(slideInterval, slideDuration));\n\n        if (this.props.onPlay && callback) {\n          this.props.onPlay(this.state.currentIndex);\n        }\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      var callback = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n      if (this._intervalId) {\n        window.clearInterval(this._intervalId);\n        this._intervalId = null;\n        this.setState({\n          isPlaying: false\n        });\n\n        if (this.props.onPause && callback) {\n          this.props.onPause(this.state.currentIndex);\n        }\n      }\n    }\n  }, {\n    key: 'setModalFullscreen',\n    value: function setModalFullscreen(state) {\n      this.setState({\n        modalFullscreen: state\n      }); // manually call because browser does not support screenchange events\n\n      if (this.props.onScreenChange) {\n        this.props.onScreenChange(state);\n      }\n    }\n  }, {\n    key: 'fullScreen',\n    value: function fullScreen() {\n      var gallery = this._imageGallery;\n\n      if (this.props.useBrowserFullscreen) {\n        if (gallery.requestFullscreen) {\n          gallery.requestFullscreen();\n        } else if (gallery.msRequestFullscreen) {\n          gallery.msRequestFullscreen();\n        } else if (gallery.mozRequestFullScreen) {\n          gallery.mozRequestFullScreen();\n        } else if (gallery.webkitRequestFullscreen) {\n          gallery.webkitRequestFullscreen();\n        } else {\n          // fallback to fullscreen modal for unsupported browsers\n          this.setModalFullscreen(true);\n        }\n      } else {\n        this.setModalFullscreen(true);\n      }\n\n      this.setState({\n        isFullscreen: true\n      });\n    }\n  }, {\n    key: 'exitFullScreen',\n    value: function exitFullScreen() {\n      if (this.state.isFullscreen) {\n        if (this.props.useBrowserFullscreen) {\n          if (document.exitFullscreen) {\n            document.exitFullscreen();\n          } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n          } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n          } else if (document.msExitFullscreen) {\n            document.msExitFullscreen();\n          } else {\n            // fallback to fullscreen modal for unsupported browsers\n            this.setModalFullscreen(false);\n          }\n        } else {\n          this.setModalFullscreen(false);\n        }\n\n        this.setState({\n          isFullscreen: false\n        });\n      }\n    }\n  }, {\n    key: 'getCurrentIndex',\n    value: function getCurrentIndex() {\n      return this.state.currentIndex;\n    }\n  }, {\n    key: '_onScreenChangeEvent',\n    value: function _onScreenChangeEvent() {\n      var _this3 = this;\n\n      screenChangeEvents.map(function (eventName) {\n        document.addEventListener(eventName, _this3._handleScreenChange);\n      });\n    }\n  }, {\n    key: '_offScreenChangeEvent',\n    value: function _offScreenChangeEvent() {\n      var _this4 = this;\n\n      screenChangeEvents.map(function (eventName) {\n        document.removeEventListener(eventName, _this4._handleScreenChange);\n      });\n    }\n  }, {\n    key: '_isThumbnailHorizontal',\n    value: function _isThumbnailHorizontal() {\n      var thumbnailPosition = this.props.thumbnailPosition;\n      return thumbnailPosition === 'left' || thumbnailPosition === 'right';\n    }\n  }, {\n    key: '_setScrollDirection',\n    value: function _setScrollDirection(deltaX, deltaY) {\n      var _state = this.state;\n      var scrollingUpDown = _state.scrollingUpDown;\n      var scrollingLeftRight = _state.scrollingLeftRight;\n      var x = Math.abs(deltaX);\n      var y = Math.abs(deltaY); // If y > x the user is scrolling up and down\n\n      if (y > x && !scrollingUpDown && !scrollingLeftRight) {\n        this.setState({\n          scrollingUpDown: true\n        });\n      } else if (!scrollingLeftRight && !scrollingUpDown) {\n        this.setState({\n          scrollingLeftRight: true\n        });\n      }\n    }\n  }, {\n    key: '_handleOnSwipedTo',\n    value: function _handleOnSwipedTo(side, isFlick) {\n      var _state2 = this.state;\n      var currentIndex = _state2.currentIndex;\n      var isTransitioning = _state2.isTransitioning;\n      var slideTo = currentIndex;\n\n      if ((this._sufficientSwipeOffset() || isFlick) && !isTransitioning) {\n        slideTo += side;\n      }\n\n      if (side < 0) {\n        if (!this._canSlideLeft()) {\n          slideTo = currentIndex;\n        }\n      } else {\n        if (!this._canSlideRight()) {\n          slideTo = currentIndex;\n        }\n      }\n\n      this._unthrottledSlideToIndex(slideTo);\n    }\n  }, {\n    key: '_sufficientSwipeOffset',\n    value: function _sufficientSwipeOffset() {\n      return Math.abs(this.state.offsetPercentage) > this.props.swipeThreshold;\n    }\n  }, {\n    key: '_canNavigate',\n    value: function _canNavigate() {\n      return this.props.items.length >= 2;\n    }\n  }, {\n    key: '_canSlideLeft',\n    value: function _canSlideLeft() {\n      return this.props.infinite || (this.props.isRTL ? this._canSlideNext() : this._canSlidePrevious());\n    }\n  }, {\n    key: '_canSlideRight',\n    value: function _canSlideRight() {\n      return this.props.infinite || (this.props.isRTL ? this._canSlidePrevious() : this._canSlideNext());\n    }\n  }, {\n    key: '_canSlidePrevious',\n    value: function _canSlidePrevious() {\n      return this.state.currentIndex > 0;\n    }\n  }, {\n    key: '_canSlideNext',\n    value: function _canSlideNext() {\n      return this.state.currentIndex < this.props.items.length - 1;\n    }\n  }, {\n    key: '_updateThumbnailTranslate',\n    value: function _updateThumbnailTranslate(previousIndex) {\n      var _state3 = this.state;\n      var thumbsTranslate = _state3.thumbsTranslate;\n      var currentIndex = _state3.currentIndex;\n\n      if (this.state.currentIndex === 0) {\n        this._setThumbsTranslate(0);\n      } else {\n        var indexDifference = Math.abs(previousIndex - currentIndex);\n\n        var scroll = this._getThumbsTranslate(indexDifference);\n\n        if (scroll > 0) {\n          if (previousIndex < currentIndex) {\n            this._setThumbsTranslate(thumbsTranslate - scroll);\n          } else if (previousIndex > currentIndex) {\n            this._setThumbsTranslate(thumbsTranslate + scroll);\n          }\n        }\n      }\n    }\n  }, {\n    key: '_setThumbsTranslate',\n    value: function _setThumbsTranslate(thumbsTranslate) {\n      this.setState({\n        thumbsTranslate: thumbsTranslate\n      });\n    }\n  }, {\n    key: '_getThumbsTranslate',\n    value: function _getThumbsTranslate(indexDifference) {\n      if (this.props.disableThumbnailScroll) {\n        return 0;\n      }\n\n      var _state4 = this.state;\n      var thumbnailsWrapperWidth = _state4.thumbnailsWrapperWidth;\n      var thumbnailsWrapperHeight = _state4.thumbnailsWrapperHeight;\n      var totalScroll = void 0;\n\n      if (this._thumbnails) {\n        // total scroll required to see the last thumbnail\n        if (this._isThumbnailHorizontal()) {\n          if (this._thumbnails.scrollHeight <= thumbnailsWrapperHeight) {\n            return 0;\n          }\n\n          totalScroll = this._thumbnails.scrollHeight - thumbnailsWrapperHeight;\n        } else {\n          if (this._thumbnails.scrollWidth <= thumbnailsWrapperWidth || thumbnailsWrapperWidth <= 0) {\n            return 0;\n          }\n\n          totalScroll = this._thumbnails.scrollWidth - thumbnailsWrapperWidth;\n        }\n\n        var totalThumbnails = this._thumbnails.children.length; // scroll-x required per index change\n\n        var perIndexScroll = totalScroll / (totalThumbnails - 1);\n        return indexDifference * perIndexScroll;\n      }\n    }\n  }, {\n    key: '_getAlignmentClassName',\n    value: function _getAlignmentClassName(index) {\n      // LEFT, and RIGHT alignments are necessary for lazyLoad\n      var currentIndex = this.state.currentIndex;\n      var alignment = '';\n      var LEFT = 'left';\n      var CENTER = 'center';\n      var RIGHT = 'right';\n\n      switch (index) {\n        case currentIndex - 1:\n          alignment = ' ' + LEFT;\n          break;\n\n        case currentIndex:\n          alignment = ' ' + CENTER;\n          break;\n\n        case currentIndex + 1:\n          alignment = ' ' + RIGHT;\n          break;\n      }\n\n      if (this.props.items.length >= 3 && this.props.infinite) {\n        if (index === 0 && currentIndex === this.props.items.length - 1) {\n          // set first slide as right slide if were sliding right from last slide\n          alignment = ' ' + RIGHT;\n        } else if (index === this.props.items.length - 1 && currentIndex === 0) {\n          // set last slide as left slide if were sliding left from first slide\n          alignment = ' ' + LEFT;\n        }\n      }\n\n      return alignment;\n    }\n  }, {\n    key: '_isGoingFromFirstToLast',\n    value: function _isGoingFromFirstToLast() {\n      var _state5 = this.state;\n      var currentIndex = _state5.currentIndex;\n      var previousIndex = _state5.previousIndex;\n      var totalSlides = this.props.items.length - 1;\n      return previousIndex === 0 && currentIndex === totalSlides;\n    }\n  }, {\n    key: '_isGoingFromLastToFirst',\n    value: function _isGoingFromLastToFirst() {\n      var _state6 = this.state;\n      var currentIndex = _state6.currentIndex;\n      var previousIndex = _state6.previousIndex;\n      var totalSlides = this.props.items.length - 1;\n      return previousIndex === totalSlides && currentIndex === 0;\n    }\n  }, {\n    key: '_getTranslateXForTwoSlide',\n    value: function _getTranslateXForTwoSlide(index) {\n      // For taking care of infinite swipe when there are only two slides\n      var _state7 = this.state;\n      var currentIndex = _state7.currentIndex;\n      var offsetPercentage = _state7.offsetPercentage;\n      var previousIndex = _state7.previousIndex;\n      var baseTranslateX = -100 * currentIndex;\n      var translateX = baseTranslateX + index * 100 + offsetPercentage; // keep track of user swiping direction\n\n      if (offsetPercentage > 0) {\n        this.direction = 'left';\n      } else if (offsetPercentage < 0) {\n        this.direction = 'right';\n      } // when swiping make sure the slides are on the correct side\n\n\n      if (currentIndex === 0 && index === 1 && offsetPercentage > 0) {\n        translateX = -100 + offsetPercentage;\n      } else if (currentIndex === 1 && index === 0 && offsetPercentage < 0) {\n        translateX = 100 + offsetPercentage;\n      }\n\n      if (currentIndex !== previousIndex) {\n        // when swiped move the slide to the correct side\n        if (previousIndex === 0 && index === 0 && offsetPercentage === 0 && this.direction === 'left') {\n          translateX = 100;\n        } else if (previousIndex === 1 && index === 1 && offsetPercentage === 0 && this.direction === 'right') {\n          translateX = -100;\n        }\n      } else {\n        // keep the slide on the correct slide even when not a swipe\n        if (currentIndex === 0 && index === 1 && offsetPercentage === 0 && this.direction === 'left') {\n          translateX = -100;\n        } else if (currentIndex === 1 && index === 0 && offsetPercentage === 0 && this.direction === 'right') {\n          translateX = 100;\n        }\n      }\n\n      return translateX;\n    }\n  }, {\n    key: '_getThumbnailBarHeight',\n    value: function _getThumbnailBarHeight() {\n      if (this._isThumbnailHorizontal()) {\n        return {\n          height: this.state.gallerySlideWrapperHeight\n        };\n      }\n\n      return {};\n    }\n  }, {\n    key: '_shouldPushSlideOnInfiniteMode',\n    value: function _shouldPushSlideOnInfiniteMode(index) {\n      /*\n        Push(show) slide if slide is the current slide, and the next slide\n        OR\n        The slide is going more than 1 slide left, or right, but not going from\n        first to last and not going from last to first\n         There is an edge case where if you go to the first or last slide, when they're\n        not left, or right of each other they will try to catch up in the background\n        so unless were going from first to last or vice versa we don't want the first\n        or last slide to show up during our transition\n      */\n      return !this._slideIsTransitioning(index) || this._ignoreIsTransitioning() && !this._isFirstOrLastSlide(index);\n    }\n  }, {\n    key: '_slideIsTransitioning',\n    value: function _slideIsTransitioning(index) {\n      /*\n      returns true if the gallery is transitioning and the index is not the\n      previous or currentIndex\n      */\n      var _state8 = this.state;\n      var isTransitioning = _state8.isTransitioning;\n      var previousIndex = _state8.previousIndex;\n      var currentIndex = _state8.currentIndex;\n      var indexIsNotPreviousOrNextSlide = !(index === previousIndex || index === currentIndex);\n      return isTransitioning && indexIsNotPreviousOrNextSlide;\n    }\n  }, {\n    key: '_isFirstOrLastSlide',\n    value: function _isFirstOrLastSlide(index) {\n      var totalSlides = this.props.items.length - 1;\n      var isLastSlide = index === totalSlides;\n      var isFirstSlide = index === 0;\n      return isLastSlide || isFirstSlide;\n    }\n  }, {\n    key: '_ignoreIsTransitioning',\n    value: function _ignoreIsTransitioning() {\n      /*\n        Ignore isTransitioning because were not going to sibling slides\n        e.g. center to left or center to right\n      */\n      var _state9 = this.state;\n      var previousIndex = _state9.previousIndex;\n      var currentIndex = _state9.currentIndex;\n      var totalSlides = this.props.items.length - 1; // we want to show the in between slides transition\n\n      var slidingMoreThanOneSlideLeftOrRight = Math.abs(previousIndex - currentIndex) > 1;\n      var notGoingFromFirstToLast = !(previousIndex === 0 && currentIndex === totalSlides);\n      var notGoingFromLastToFirst = !(previousIndex === totalSlides && currentIndex === 0);\n      return slidingMoreThanOneSlideLeftOrRight && notGoingFromFirstToLast && notGoingFromLastToFirst;\n    }\n  }, {\n    key: '_getSlideStyle',\n    value: function _getSlideStyle(index) {\n      var _state10 = this.state;\n      var currentIndex = _state10.currentIndex;\n      var offsetPercentage = _state10.offsetPercentage;\n      var _props2 = this.props;\n      var infinite = _props2.infinite;\n      var items = _props2.items;\n      var useTranslate3D = _props2.useTranslate3D;\n      var isRTL = _props2.isRTL;\n      var baseTranslateX = -100 * currentIndex;\n      var totalSlides = items.length - 1; // calculates where the other slides belong based on currentIndex\n      // if it is RTL the base line should be reversed\n\n      var translateX = (baseTranslateX + index * 100) * (isRTL ? -1 : 1) + offsetPercentage;\n\n      if (infinite && items.length > 2) {\n        if (currentIndex === 0 && index === totalSlides) {\n          // make the last slide the slide before the first\n          // if it is RTL the base line should be reversed\n          translateX = -100 * (isRTL ? -1 : 1) + offsetPercentage;\n        } else if (currentIndex === totalSlides && index === 0) {\n          // make the first slide the slide after the last\n          // if it is RTL the base line should be reversed\n          translateX = 100 * (isRTL ? -1 : 1) + offsetPercentage;\n        }\n      } // Special case when there are only 2 items with infinite on\n\n\n      if (infinite && items.length === 2) {\n        translateX = this._getTranslateXForTwoSlide(index);\n      }\n\n      var translate = 'translate(' + translateX + '%, 0)';\n\n      if (useTranslate3D) {\n        translate = 'translate3d(' + translateX + '%, 0, 0)';\n      }\n\n      return {\n        WebkitTransform: translate,\n        MozTransform: translate,\n        msTransform: translate,\n        OTransform: translate,\n        transform: translate\n      };\n    }\n  }, {\n    key: '_getThumbnailStyle',\n    value: function _getThumbnailStyle() {\n      var translate = void 0;\n      var _props3 = this.props;\n      var useTranslate3D = _props3.useTranslate3D;\n      var isRTL = _props3.isRTL;\n      var thumbsTranslate = this.state.thumbsTranslate;\n      var verticalTranslateValue = isRTL ? thumbsTranslate * -1 : thumbsTranslate;\n\n      if (this._isThumbnailHorizontal()) {\n        translate = 'translate(0, ' + thumbsTranslate + 'px)';\n\n        if (useTranslate3D) {\n          translate = 'translate3d(0, ' + thumbsTranslate + 'px, 0)';\n        }\n      } else {\n        translate = 'translate(' + verticalTranslateValue + 'px, 0)';\n\n        if (useTranslate3D) {\n          translate = 'translate3d(' + verticalTranslateValue + 'px, 0, 0)';\n        }\n      }\n\n      return {\n        WebkitTransform: translate,\n        MozTransform: translate,\n        msTransform: translate,\n        OTransform: translate,\n        transform: translate\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var _state11 = this.state;\n      var currentIndex = _state11.currentIndex;\n      var isFullscreen = _state11.isFullscreen;\n      var modalFullscreen = _state11.modalFullscreen;\n      var isPlaying = _state11.isPlaying;\n      var scrollingLeftRight = _state11.scrollingLeftRight;\n      var _props4 = this.props;\n      var infinite = _props4.infinite;\n      var preventDefaultTouchmoveEvent = _props4.preventDefaultTouchmoveEvent;\n      var isRTL = _props4.isRTL;\n\n      var thumbnailStyle = this._getThumbnailStyle();\n\n      var thumbnailPosition = this.props.thumbnailPosition;\n      var slideLeft = this._slideLeft;\n      var slideRight = this._slideRight;\n      var slides = [];\n      var thumbnails = [];\n      var bullets = [];\n      this.props.items.forEach(function (item, index) {\n        var alignment = _this5._getAlignmentClassName(index);\n\n        var originalClass = item.originalClass ? ' ' + item.originalClass : '';\n        var thumbnailClass = item.thumbnailClass ? ' ' + item.thumbnailClass : '';\n        var renderItem = item.renderItem || _this5.props.renderItem || _this5._renderItem;\n        var renderThumbInner = item.renderThumbInner || _this5.props.renderThumbInner || _this5._renderThumbInner;\n        var showItem = !_this5.props.lazyLoad || alignment || _this5._lazyLoaded[index];\n\n        if (showItem && _this5.props.lazyLoad) {\n          _this5._lazyLoaded[index] = true;\n        }\n\n        var slideStyle = _this5._getSlideStyle(index);\n\n        var slide = _react2.default.createElement('div', {\n          key: index,\n          className: 'image-gallery-slide' + alignment + originalClass,\n          style: _extends(slideStyle, _this5.state.style),\n          onClick: _this5.props.onClick,\n          onTouchMove: _this5.props.onTouchMove,\n          onTouchEnd: _this5.props.onTouchEnd,\n          onTouchStart: _this5.props.onTouchStart,\n          onMouseOver: _this5.props.onMouseOver,\n          onMouseLeave: _this5.props.onMouseLeave,\n          role: _this5.props.onClick && 'button'\n        }, showItem ? renderItem(item) : _react2.default.createElement('div', {\n          style: {\n            height: '100%'\n          }\n        }));\n\n        if (infinite) {\n          // don't add some slides while transitioning to avoid background transitions\n          if (_this5._shouldPushSlideOnInfiniteMode(index)) {\n            slides.push(slide);\n          }\n        } else {\n          slides.push(slide);\n        }\n\n        if (_this5.props.showThumbnails) {\n          thumbnails.push(_react2.default.createElement('a', {\n            key: index,\n            role: 'button',\n            'aria-pressed': currentIndex === index ? 'true' : 'false',\n            'aria-label': 'Go to Slide ' + (index + 1),\n            className: 'image-gallery-thumbnail' + (currentIndex === index ? ' active' : '') + thumbnailClass,\n            onClick: function onClick(event) {\n              return _this5._onThumbnailClick(event, index);\n            }\n          }, renderThumbInner(item)));\n        }\n\n        if (_this5.props.showBullets) {\n          var bulletOnClick = function bulletOnClick(event) {\n            if (item.bulletOnClick) {\n              item.bulletOnClick({\n                item: item,\n                itemIndex: index,\n                currentIndex: currentIndex\n              });\n            }\n\n            return _this5.slideToIndex.call(_this5, index, event);\n          };\n\n          bullets.push(_react2.default.createElement('button', {\n            key: index,\n            type: 'button',\n            className: ['image-gallery-bullet', currentIndex === index ? 'active' : '', item.bulletClass || ''].join(' '),\n            onClick: bulletOnClick,\n            'aria-pressed': currentIndex === index ? 'true' : 'false',\n            'aria-label': 'Go to Slide ' + (index + 1)\n          }));\n        }\n      });\n\n      var slideWrapper = _react2.default.createElement('div', {\n        ref: this._initGalleryResizing,\n        className: 'image-gallery-slide-wrapper ' + thumbnailPosition + ' ' + (isRTL ? 'image-gallery-rtl' : '')\n      }, this.props.renderCustomControls && this.props.renderCustomControls(), this.props.showFullscreenButton && this.props.renderFullscreenButton(this._toggleFullScreen, isFullscreen), this.props.showPlayButton && this.props.renderPlayPauseButton(this._togglePlay, isPlaying), this._canNavigate() ? [this.props.showNav && _react2.default.createElement('span', {\n        key: 'navigation'\n      }, this.props.renderLeftNav(slideLeft, !this._canSlideLeft()), this.props.renderRightNav(slideRight, !this._canSlideRight())), _react2.default.createElement(_reactSwipeable2.default, {\n        className: 'image-gallery-swipe',\n        disabled: this.props.disableSwipe,\n        key: 'swipeable',\n        delta: 0,\n        flickThreshold: this.props.flickThreshold,\n        onSwiping: this._handleSwiping,\n        onSwiped: this._handleOnSwiped,\n        stopPropagation: this.props.stopPropagation,\n        preventDefaultTouchmoveEvent: preventDefaultTouchmoveEvent || scrollingLeftRight\n      }, _react2.default.createElement('div', {\n        className: 'image-gallery-slides'\n      }, slides))] : _react2.default.createElement('div', {\n        className: 'image-gallery-slides'\n      }, slides), this.props.showBullets && _react2.default.createElement('div', {\n        className: 'image-gallery-bullets'\n      }, _react2.default.createElement('div', {\n        className: 'image-gallery-bullets-container',\n        role: 'navigation',\n        'aria-label': 'Bullet Navigation'\n      }, bullets)), this.props.showIndex && _react2.default.createElement('div', {\n        className: 'image-gallery-index'\n      }, _react2.default.createElement('span', {\n        className: 'image-gallery-index-current'\n      }, this.state.currentIndex + 1), _react2.default.createElement('span', {\n        className: 'image-gallery-index-separator'\n      }, this.props.indexSeparator), _react2.default.createElement('span', {\n        className: 'image-gallery-index-total'\n      }, this.props.items.length)));\n\n      var classNames = ['image-gallery', this.props.additionalClass, modalFullscreen ? 'fullscreen-modal' : ''].filter(function (name) {\n        return typeof name === 'string';\n      }).join(' ');\n      return _react2.default.createElement('div', {\n        ref: function ref(i) {\n          return _this5._imageGallery = i;\n        },\n        className: classNames,\n        'aria-live': 'polite'\n      }, _react2.default.createElement('div', {\n        className: 'image-gallery-content' + (isFullscreen ? ' fullscreen' : '')\n      }, (thumbnailPosition === 'bottom' || thumbnailPosition === 'right') && slideWrapper, this.props.showThumbnails && _react2.default.createElement('div', {\n        className: 'image-gallery-thumbnails-wrapper ' + thumbnailPosition + ' ' + (!this._isThumbnailHorizontal() && isRTL ? 'thumbnails-wrapper-rtl' : ''),\n        style: this._getThumbnailBarHeight()\n      }, _react2.default.createElement('div', {\n        className: 'image-gallery-thumbnails',\n        ref: function ref(i) {\n          return _this5._thumbnailsWrapper = i;\n        }\n      }, _react2.default.createElement('div', {\n        ref: function ref(t) {\n          return _this5._thumbnails = t;\n        },\n        className: 'image-gallery-thumbnails-container',\n        style: thumbnailStyle,\n        'aria-label': 'Thumbnail Navigation'\n      }, thumbnails))), (thumbnailPosition === 'top' || thumbnailPosition === 'left') && slideWrapper));\n    }\n  }]);\n\n  return ImageGallery;\n}(_react2.default.Component);\n\nImageGallery.propTypes = {\n  flickThreshold: _propTypes2.default.number,\n  items: _propTypes2.default.array.isRequired,\n  showNav: _propTypes2.default.bool,\n  autoPlay: _propTypes2.default.bool,\n  lazyLoad: _propTypes2.default.bool,\n  infinite: _propTypes2.default.bool,\n  showIndex: _propTypes2.default.bool,\n  showBullets: _propTypes2.default.bool,\n  showThumbnails: _propTypes2.default.bool,\n  showPlayButton: _propTypes2.default.bool,\n  showFullscreenButton: _propTypes2.default.bool,\n  disableThumbnailScroll: _propTypes2.default.bool,\n  disableArrowKeys: _propTypes2.default.bool,\n  disableSwipe: _propTypes2.default.bool,\n  useBrowserFullscreen: _propTypes2.default.bool,\n  preventDefaultTouchmoveEvent: _propTypes2.default.bool,\n  defaultImage: _propTypes2.default.string,\n  indexSeparator: _propTypes2.default.string,\n  thumbnailPosition: _propTypes2.default.string,\n  startIndex: _propTypes2.default.number,\n  slideDuration: _propTypes2.default.number,\n  slideInterval: _propTypes2.default.number,\n  swipeThreshold: _propTypes2.default.number,\n  swipingTransitionDuration: _propTypes2.default.number,\n  onSlide: _propTypes2.default.func,\n  onScreenChange: _propTypes2.default.func,\n  onPause: _propTypes2.default.func,\n  onPlay: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n  onImageLoad: _propTypes2.default.func,\n  onImageError: _propTypes2.default.func,\n  onTouchMove: _propTypes2.default.func,\n  onTouchEnd: _propTypes2.default.func,\n  onTouchStart: _propTypes2.default.func,\n  onMouseOver: _propTypes2.default.func,\n  onMouseLeave: _propTypes2.default.func,\n  onThumbnailError: _propTypes2.default.func,\n  onThumbnailClick: _propTypes2.default.func,\n  renderCustomControls: _propTypes2.default.func,\n  renderLeftNav: _propTypes2.default.func,\n  renderRightNav: _propTypes2.default.func,\n  renderPlayPauseButton: _propTypes2.default.func,\n  renderFullscreenButton: _propTypes2.default.func,\n  renderItem: _propTypes2.default.func,\n  stopPropagation: _propTypes2.default.bool,\n  additionalClass: _propTypes2.default.string,\n  useTranslate3D: _propTypes2.default.bool,\n  isRTL: _propTypes2.default.bool\n};\nImageGallery.defaultProps = {\n  items: [],\n  showNav: true,\n  autoPlay: false,\n  lazyLoad: false,\n  infinite: true,\n  showIndex: false,\n  showBullets: false,\n  showThumbnails: true,\n  showPlayButton: true,\n  showFullscreenButton: true,\n  disableThumbnailScroll: false,\n  disableArrowKeys: false,\n  disableSwipe: false,\n  useTranslate3D: true,\n  isRTL: false,\n  useBrowserFullscreen: true,\n  preventDefaultTouchmoveEvent: false,\n  flickThreshold: 0.4,\n  stopPropagation: false,\n  indexSeparator: ' / ',\n  thumbnailPosition: 'bottom',\n  startIndex: 0,\n  slideDuration: 450,\n  swipingTransitionDuration: 0,\n  slideInterval: 3000,\n  swipeThreshold: 30,\n  renderLeftNav: function renderLeftNav(onClick, disabled) {\n    return _react2.default.createElement('button', {\n      type: 'button',\n      className: 'image-gallery-left-nav',\n      disabled: disabled,\n      onClick: onClick,\n      'aria-label': 'Previous Slide'\n    });\n  },\n  renderRightNav: function renderRightNav(onClick, disabled) {\n    return _react2.default.createElement('button', {\n      type: 'button',\n      className: 'image-gallery-right-nav',\n      disabled: disabled,\n      onClick: onClick,\n      'aria-label': 'Next Slide'\n    });\n  },\n  renderPlayPauseButton: function renderPlayPauseButton(onClick, isPlaying) {\n    return _react2.default.createElement('button', {\n      type: 'button',\n      className: 'image-gallery-play-button' + (isPlaying ? ' active' : ''),\n      onClick: onClick,\n      'aria-label': 'Play or Pause Slideshow'\n    });\n  },\n  renderFullscreenButton: function renderFullscreenButton(onClick, isFullscreen) {\n    return _react2.default.createElement('button', {\n      type: 'button',\n      className: 'image-gallery-fullscreen-button' + (isFullscreen ? ' active' : ''),\n      onClick: onClick,\n      'aria-label': 'Open Fullscreen'\n    });\n  }\n};\nexports.default = ImageGallery;","map":null,"metadata":{},"sourceType":"script"}