{"ast":null,"code":"import _defineProperty from \"/Users/mario/WebProjects/mario-personal-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"/Users/mario/WebProjects/mario-personal-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/mario/WebProjects/mario-personal-website/src/components/Table/Table.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\"; // @material-ui/core components\n\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport style from \"assets/jss/material-kit-pro-react/components/tableStyle.jsx\";\n\nfunction CustomTable(_ref) {\n  var props = _extends({}, _ref);\n\n  var classes = props.classes,\n      tableHead = props.tableHead,\n      tableData = props.tableData,\n      tableHeaderColor = props.tableHeaderColor,\n      hover = props.hover,\n      colorsColls = props.colorsColls,\n      coloredColls = props.coloredColls,\n      customCellClasses = props.customCellClasses,\n      customClassesForCells = props.customClassesForCells,\n      striped = props.striped,\n      tableShopping = props.tableShopping,\n      customHeadCellClasses = props.customHeadCellClasses,\n      customHeadClassesForCells = props.customHeadClassesForCells;\n  return React.createElement(\"div\", {\n    className: classes.tableResponsive,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Table, {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, tableHead !== undefined ? React.createElement(TableHead, {\n    className: classes[tableHeaderColor],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    className: classes.tableRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, tableHead.map(function (prop, key) {\n    var _cx;\n\n    var tableCellClasses = classes.tableHeadCell + \" \" + classes.tableCell + \" \" + cx((_cx = {}, _defineProperty(_cx, customHeadCellClasses[customHeadClassesForCells.indexOf(key)], customHeadClassesForCells.indexOf(key) !== -1), _defineProperty(_cx, classes.tableShoppingHead, tableShopping), _cx));\n    return React.createElement(TableCell, {\n      className: tableCellClasses,\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, prop);\n  }))) : null, React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, tableData.map(function (prop, key) {\n    var _cx2;\n\n    var rowColor = \"\";\n    var rowColored = false;\n\n    if (prop.color !== undefined) {\n      rowColor = prop.color;\n      rowColored = true;\n      prop = prop.data;\n    }\n\n    var tableRowClasses = cx((_cx2 = {}, _defineProperty(_cx2, classes.tableRowHover, hover), _defineProperty(_cx2, classes[rowColor + \"Row\"], rowColored), _defineProperty(_cx2, classes.tableStripedRow, striped && key % 2 === 0), _cx2));\n\n    if (prop.total) {\n      return React.createElement(TableRow, {\n        key: key,\n        hover: hover,\n        className: tableRowClasses,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        className: classes.tableCell,\n        colSpan: prop.colspan,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(TableCell, {\n        className: classes.tableCell + \" \" + classes.tableCellTotal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Total\"), React.createElement(TableCell, {\n        className: classes.tableCell + \" \" + classes.tableCellAmount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, prop.amount), tableHead.length - (prop.colspan - 0 + 2) > 0 ? React.createElement(TableCell, {\n        className: classes.tableCell,\n        colSpan: tableHead.length - (prop.colspan - 0 + 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }) : null);\n    }\n\n    if (prop.purchase) {\n      return React.createElement(TableRow, {\n        key: key,\n        hover: hover,\n        className: tableRowClasses,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        className: classes.tableCell,\n        colSpan: prop.colspan,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(TableCell, {\n        className: classes.tableCell + \" \" + classes.tableCellTotal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Total\"), React.createElement(TableCell, {\n        className: classes.tableCell + \" \" + classes.tableCellAmount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, prop.amount), React.createElement(TableCell, {\n        className: classes.tableCell + \" \" + classes.right,\n        colSpan: prop.col.colspan,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, prop.col.text));\n    }\n\n    return React.createElement(TableRow, {\n      key: key,\n      hover: hover,\n      className: classes.tableRow + \" \" + tableRowClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, prop.map(function (prop, key) {\n      var _cx3;\n\n      var tableCellClasses = classes.tableCell + \" \" + cx((_cx3 = {}, _defineProperty(_cx3, classes[colorsColls[coloredColls.indexOf(key)]], coloredColls.indexOf(key) !== -1), _defineProperty(_cx3, customCellClasses[customClassesForCells.indexOf(key)], customClassesForCells.indexOf(key) !== -1), _cx3));\n      return React.createElement(TableCell, {\n        className: tableCellClasses,\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, prop);\n    }));\n  }))));\n}\n\nCustomTable.defaultProps = {\n  tableHeaderColor: \"gray\",\n  hover: false,\n  colorsColls: [],\n  coloredColls: [],\n  striped: false,\n  customCellClasses: [],\n  customClassesForCells: [],\n  customHeadCellClasses: [],\n  customHeadClassesForCells: []\n};\nCustomTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n  tableHeaderColor: PropTypes.oneOf([\"warning\", \"primary\", \"danger\", \"success\", \"info\", \"rose\", \"gray\"]),\n  tableHead: PropTypes.arrayOf(PropTypes.string),\n  // Of(PropTypes.arrayOf(PropTypes.node)) || Of(PropTypes.object),\n  tableData: PropTypes.array,\n  hover: PropTypes.bool,\n  coloredColls: PropTypes.arrayOf(PropTypes.number),\n  // Of([\"warning\",\"primary\",\"danger\",\"success\",\"info\",\"rose\",\"gray\"]) - colorsColls\n  colorsColls: PropTypes.array,\n  customCellClasses: PropTypes.arrayOf(PropTypes.string),\n  customClassesForCells: PropTypes.arrayOf(PropTypes.number),\n  customHeadCellClasses: PropTypes.arrayOf(PropTypes.string),\n  customHeadClassesForCells: PropTypes.arrayOf(PropTypes.number),\n  striped: PropTypes.bool,\n  // this will cause some changes in font\n  tableShopping: PropTypes.bool\n};\nexport default withStyles(style)(CustomTable);","map":{"version":3,"sources":["/Users/mario/WebProjects/mario-personal-website/src/components/Table/Table.jsx"],"names":["React","cx","PropTypes","withStyles","Table","TableBody","TableCell","TableHead","TableRow","style","CustomTable","props","classes","tableHead","tableData","tableHeaderColor","hover","colorsColls","coloredColls","customCellClasses","customClassesForCells","striped","tableShopping","customHeadCellClasses","customHeadClassesForCells","tableResponsive","table","undefined","tableRow","map","prop","key","tableCellClasses","tableHeadCell","tableCell","indexOf","tableShoppingHead","rowColor","rowColored","color","data","tableRowClasses","tableRowHover","tableStripedRow","total","colspan","tableCellTotal","tableCellAmount","amount","length","purchase","right","col","text","defaultProps","propTypes","object","isRequired","oneOf","arrayOf","string","array","bool","number"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\n\n// @material-ui/core components\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport style from \"assets/jss/material-kit-pro-react/components/tableStyle.jsx\";\n\nfunction CustomTable({ ...props }) {\n  const {\n    classes,\n    tableHead,\n    tableData,\n    tableHeaderColor,\n    hover,\n    colorsColls,\n    coloredColls,\n    customCellClasses,\n    customClassesForCells,\n    striped,\n    tableShopping,\n    customHeadCellClasses,\n    customHeadClassesForCells\n  } = props;\n  return (\n    <div className={classes.tableResponsive}>\n      <Table className={classes.table}>\n        {tableHead !== undefined ? (\n          <TableHead className={classes[tableHeaderColor]}>\n            <TableRow className={classes.tableRow}>\n              {tableHead.map((prop, key) => {\n                const tableCellClasses =\n                  classes.tableHeadCell +\n                  \" \" +\n                  classes.tableCell +\n                  \" \" +\n                  cx({\n                    [customHeadCellClasses[\n                      customHeadClassesForCells.indexOf(key)\n                    ]]: customHeadClassesForCells.indexOf(key) !== -1,\n                    [classes.tableShoppingHead]: tableShopping\n                  });\n                return (\n                  <TableCell className={tableCellClasses} key={key}>\n                    {prop}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          </TableHead>\n        ) : null}\n        <TableBody>\n          {tableData.map((prop, key) => {\n            var rowColor = \"\";\n            var rowColored = false;\n            if (prop.color !== undefined) {\n              rowColor = prop.color;\n              rowColored = true;\n              prop = prop.data;\n            }\n            const tableRowClasses = cx({\n              [classes.tableRowHover]: hover,\n              [classes[rowColor + \"Row\"]]: rowColored,\n              [classes.tableStripedRow]: striped && key % 2 === 0\n            });\n            if (prop.total) {\n              return (\n                <TableRow key={key} hover={hover} className={tableRowClasses}>\n                  <TableCell\n                    className={classes.tableCell}\n                    colSpan={prop.colspan}\n                  />\n                  <TableCell\n                    className={classes.tableCell + \" \" + classes.tableCellTotal}\n                  >\n                    Total\n                  </TableCell>\n                  <TableCell\n                    className={\n                      classes.tableCell + \" \" + classes.tableCellAmount\n                    }\n                  >\n                    {prop.amount}\n                  </TableCell>\n                  {tableHead.length - (prop.colspan - 0 + 2) > 0 ? (\n                    <TableCell\n                      className={classes.tableCell}\n                      colSpan={tableHead.length - (prop.colspan - 0 + 2)}\n                    />\n                  ) : null}\n                </TableRow>\n              );\n            }\n            if (prop.purchase) {\n              return (\n                <TableRow key={key} hover={hover} className={tableRowClasses}>\n                  <TableCell\n                    className={classes.tableCell}\n                    colSpan={prop.colspan}\n                  />\n                  <TableCell\n                    className={classes.tableCell + \" \" + classes.tableCellTotal}\n                  >\n                    Total\n                  </TableCell>\n                  <TableCell\n                    className={\n                      classes.tableCell + \" \" + classes.tableCellAmount\n                    }\n                  >\n                    {prop.amount}\n                  </TableCell>\n                  <TableCell\n                    className={classes.tableCell + \" \" + classes.right}\n                    colSpan={prop.col.colspan}\n                  >\n                    {prop.col.text}\n                  </TableCell>\n                </TableRow>\n              );\n            }\n            return (\n              <TableRow\n                key={key}\n                hover={hover}\n                className={classes.tableRow + \" \" + tableRowClasses}\n              >\n                {prop.map((prop, key) => {\n                  const tableCellClasses =\n                    classes.tableCell +\n                    \" \" +\n                    cx({\n                      [classes[colorsColls[coloredColls.indexOf(key)]]]:\n                        coloredColls.indexOf(key) !== -1,\n                      [customCellClasses[customClassesForCells.indexOf(key)]]:\n                        customClassesForCells.indexOf(key) !== -1\n                    });\n                  return (\n                    <TableCell className={tableCellClasses} key={key}>\n                      {prop}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nCustomTable.defaultProps = {\n  tableHeaderColor: \"gray\",\n  hover: false,\n  colorsColls: [],\n  coloredColls: [],\n  striped: false,\n  customCellClasses: [],\n  customClassesForCells: [],\n  customHeadCellClasses: [],\n  customHeadClassesForCells: []\n};\n\nCustomTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n  tableHeaderColor: PropTypes.oneOf([\n    \"warning\",\n    \"primary\",\n    \"danger\",\n    \"success\",\n    \"info\",\n    \"rose\",\n    \"gray\"\n  ]),\n  tableHead: PropTypes.arrayOf(PropTypes.string),\n  // Of(PropTypes.arrayOf(PropTypes.node)) || Of(PropTypes.object),\n  tableData: PropTypes.array,\n  hover: PropTypes.bool,\n  coloredColls: PropTypes.arrayOf(PropTypes.number),\n  // Of([\"warning\",\"primary\",\"danger\",\"success\",\"info\",\"rose\",\"gray\"]) - colorsColls\n  colorsColls: PropTypes.array,\n  customCellClasses: PropTypes.arrayOf(PropTypes.string),\n  customClassesForCells: PropTypes.arrayOf(PropTypes.number),\n  customHeadCellClasses: PropTypes.arrayOf(PropTypes.string),\n  customHeadClassesForCells: PropTypes.arrayOf(PropTypes.number),\n  striped: PropTypes.bool,\n  // this will cause some changes in font\n  tableShopping: PropTypes.bool\n};\n\nexport default withStyles(style)(CustomTable);\n"]},"metadata":{},"sourceType":"module"}