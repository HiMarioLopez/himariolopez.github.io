{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _utils = require(\"@material-ui/utils\");\n\nvar _SelectInput = _interopRequireDefault(require(\"./SelectInput\"));\n\nvar _formControlState = _interopRequireDefault(require(\"../FormControl/formControlState\"));\n\nvar _withFormControlContext = _interopRequireDefault(require(\"../FormControl/withFormControlContext\"));\n\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\n\nvar _mergeClasses = _interopRequireDefault(require(\"../styles/mergeClasses\"));\n\nvar _ArrowDropDown = _interopRequireDefault(require(\"../internal/svg-icons/ArrowDropDown\"));\n\nvar _Input = _interopRequireDefault(require(\"../Input\"));\n\nvar _NativeSelect = require(\"../NativeSelect/NativeSelect\");\n\nvar _NativeSelectInput = _interopRequireDefault(require(\"../NativeSelect/NativeSelectInput\")); // @inheritedComponent Input\n// To replace with InputBase in v4\n\n\nvar styles = _NativeSelect.styles;\nexports.styles = styles;\n\nfunction Select(props) {\n  var autoWidth = props.autoWidth,\n      children = props.children,\n      classes = props.classes,\n      displayEmpty = props.displayEmpty,\n      IconComponent = props.IconComponent,\n      input = props.input,\n      inputProps = props.inputProps,\n      MenuProps = props.MenuProps,\n      muiFormControl = props.muiFormControl,\n      multiple = props.multiple,\n      native = props.native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      variant = props.variant,\n      other = (0, _objectWithoutProperties2.default)(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"input\", \"inputProps\", \"MenuProps\", \"muiFormControl\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n  var inputComponent = native ? _NativeSelectInput.default : _SelectInput.default;\n  var fcs = (0, _formControlState.default)({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  return _react.default.cloneElement(input, (0, _extends2.default)({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    inputProps: (0, _extends2.default)({\n      children: children,\n      IconComponent: IconComponent,\n      variant: fcs.variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {} : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: SelectDisplayProps\n    }, inputProps, {\n      classes: inputProps ? (0, _mergeClasses.default)({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {})\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  /**\r\n   * If true, the width of the popover will automatically be set according to the items inside the\r\n   * menu, otherwise it will be at least the width of the select input.\r\n   */\n  autoWidth: _propTypes.default.bool,\n\n  /**\r\n   * The option elements to populate the select with.\r\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\r\n   */\n  children: _propTypes.default.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css-api) below for more details.\r\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\r\n   * If `true`, the selected item is displayed even if its value is empty.\r\n   * You can only use it when the `native` property is `false` (default).\r\n   */\n  displayEmpty: _propTypes.default.bool,\n\n  /**\r\n   * The icon that displays the arrow.\r\n   */\n  IconComponent: _utils.componentPropType,\n\n  /**\r\n   * An `Input` element; does not have to be a material-ui specific `Input`.\r\n   */\n  input: _propTypes.default.element,\n\n  /**\r\n   * Attributes applied to the `input` element.\r\n   * When `native` is `true`, the attributes are applied on the `select` element.\r\n   */\n  inputProps: _propTypes.default.object,\n\n  /**\r\n   * Properties applied to the [`Menu`](/api/menu/) element.\r\n   */\n  MenuProps: _propTypes.default.object,\n\n  /**\r\n   * If true, `value` must be an array and the menu will support multiple selections.\r\n   */\n  multiple: _propTypes.default.bool,\n\n  /**\r\n   * If `true`, the component will be using a native `select` element.\r\n   */\n  native: _propTypes.default.bool,\n\n  /**\r\n   * Callback function fired when a menu item is selected.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value`.\r\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\r\n   */\n  onChange: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback\r\n   */\n  onClose: _propTypes.default.func,\n\n  /**\r\n   * Callback fired when the component requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback\r\n   */\n  onOpen: _propTypes.default.func,\n\n  /**\r\n   * Control `select` open state.\r\n   * You can only use it when the `native` property is `false` (default).\r\n   */\n  open: _propTypes.default.bool,\n\n  /**\r\n   * Render the selected value.\r\n   * You can only use it when the `native` property is `false` (default).\r\n   *\r\n   * @param {*} value The `value` provided to the component.\r\n   * @returns {ReactElement}\r\n   */\n  renderValue: _propTypes.default.func,\n\n  /**\r\n   * Properties applied to the clickable div element.\r\n   */\n  SelectDisplayProps: _propTypes.default.object,\n\n  /**\r\n   * The input value.\r\n   * This property is required when the `native` property is `false` (default).\r\n   */\n  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool, _propTypes.default.object, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool, _propTypes.default.object]))]),\n\n  /**\r\n   * The variant to use.\r\n   */\n  variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nSelect.defaultProps = {\n  autoWidth: false,\n  displayEmpty: false,\n  IconComponent: _ArrowDropDown.default,\n  input: _react.default.createElement(_Input.default, null),\n  multiple: false,\n  native: false\n};\nSelect.muiName = 'Select';\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiSelect'\n})((0, _withFormControlContext.default)(Select));\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}